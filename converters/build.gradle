// ============================================================================
/*
 * Copyright 2013-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ============================================================================


apply plugin : 'groovy'
apply plugin : 'java-library'
apply plugin : 'com.jfrog.artifactory'
apply plugin : 'com.jfrog.bintray'

// NOTE replace deficient built-in publishing plugin with nebula-publishing,
// which does a better job generating the POM and properly aggregates signature files for upload to Bintray
apply plugin : 'maven-publish'

ext {

    dryRunPublications = project.hasProperty('dryRun') && project.dryRun.toBoolean()
    buildDateTime = new Date()
    (buildDateOnly, buildTimeOnly) = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSSZ').format(buildDateTime).split(' ')

    projectMeta = {
        resolveStrategy = groovy.lang.Closure.DELEGATE_FIRST
        name project.name
        description project.description
        url 'https://github.com/asciidoctor/asciidoctor-leanpub-converter'
        inceptionYear '2015'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        issueManagement {
            system 'github'
            url 'https://github.com/asciidoctor/asciidoctor-leanpub-converter/issues'
        }
        scm {
            url 'https://github.com/asciidoctor/asciidoctor-leanpub-converter'
        }
        developers {
            developer {
                id 'ysb33r'
                name 'Schalk W. CronjÃ©'
                email 'ysb33r@gmail.com'
                timezone '1'
                roles {
                    role 'Project Lead'
                }
            }
            developer {
                id 'robertpanzer'
                name 'Robert Panzer'
                email 'robert.panzer.pb@gmail.com'
                timezone '1'
                roles {
                    role 'Contributor'
                }
            }
        }
    }

}


sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {

    api "org.asciidoctor:asciidoctorj:${asciidoctorjVersion}"
    implementation 'org.codehaus.groovy:groovy:2.4.15'
    implementation 'org.slf4j:slf4j-api:1.7.5'
//    implementation 'commons-io:commons-io:2.4'

    testImplementation('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    testRuntimeOnly 'org.asciidoctor:asciidoctorj-diagram:1.5.8'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.5'
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }

    systemProperties 'TESTROOT' : file("${buildDir}/test/leanpub")
}

task sourcesJar(type: Jar, dependsOn: classes, group: 'Release') {
    description 'Assembles a jar archive containing the main source code.'
    from sourceSets.main.allSource
    classifier 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc, group: 'Release') {
    description 'Assembles a jar archive containing the Javadoc API documentation for the main source code.'
    from javadoc.destinationDir
    classifier 'javadoc'
}

artifacts {
    archives sourcesJar, javadocJar
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUsername') ? project.bintrayUsername : ''
            password = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : ''
            maven = true
        }
        defaults {

            publications('jars')
            publicConfigs('archives')

            publishBuildInfo = !dryRunPublications  //Publish build-info to Artifactory (true by default)
            publishArtifacts = !dryRunPublications   //Publish artifacts to Artifactory (true by default)
            publishPom = !dryRunPublications  //Publish generated POM files to Artifactory (true by default).
            publishIvy = false   //Publish generated Ivy descriptor files to Artifactory (true by default).

        }
    }

}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : ''
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : ''

    publications = ['jars']

//    if ( !project.hasProperty('skip.signing') ) {
//        // Copy the signed pom to bintrayDestination
//        filesSpec {
//            from signPom
//            into signPom.bintrayDestination
//        }
//        bintrayUpload.dependsOn signPom
//    }

    dryRun = project.hasProperty('dryRun') && project.dryRun.toBoolean()
    publish = !version.endsWith('-SNAPSHOT')

    pkg {
        repo = System.env['BINTRAY_REPO'] ?: (project.hasProperty('bintrayRepo') ? project.bintrayRepo : 'maven')
        userOrg = 'asciidoctor'
        name = 'asciidoctor-leanpub-backend'
        desc = project.description

        licenses = ['Apache-2.0']
        labels = ['asciidoctor', 'asciidoctorj', 'asciidoc']
        websiteUrl = 'http://asciidoctor.org/docs/asciidoctorj'
        issueTrackerUrl = 'https://github.com/asciidoctor/asciidoctor-leanpub-converter/issues'
        vcsUrl = 'https://github.com/asciidoctor/asciidoctor-leanpub-converter'
        publicDownloadNumbers = true

        version {
            name = project.version
            vcsTag = "${rootProject.name}-${rootProject.version}"
        }
    }
}


publishing.publications {
    jars(MavenPublication) {
        artifactId 'asciidoctor-leanpub-markdown'

        artifact sourcesJar
        artifact javadocJar

        from components.java

        pom.withXml {
            asNode().children().last() + projectMeta
        }
    }
}

//if ( !project.hasProperty('skip.signing') ) {
//    task addSignaturesToPublication(dependsOn: signArchives) {
//        group "publishing"
//        description "add all signatures to the publication"
//
//        doLast {
//            publishing.publications {
//                jars(MavenPublication) {
//                    configurations.signatures.getArtifacts().each { sig ->
//                        logger.debug "adding signature to jars publication: $sig"
//                        artifact(sig) {
//                            extension "jar.asc"
//                        }
//                    }
//                }
//            }
//        }
//    }
//
//    tasks["signPom"].finalizedBy addSignaturesToPublication
//}

jar {
    manifest {
        attributes \
      'Built-By': System.properties['user.name'],
            'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
            'Build-Date': buildDateOnly,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'asciidoctor.org'
    }
}

artifactoryPublish{
    onlyIf { version.endsWith('-SNAPSHOT') }
    dependsOn build
}

publish {
    onlyIf { !version.endsWith('-SNAPSHOT') }
    dependsOn build
}

bintrayUpload {
    onlyIf { !version.endsWith('-SNAPSHOT') }
    dependsOn build
}

travisci {
    ext {
        travisPublishableRepo = System.getenv('TRAVIS_REPO_SLUG') == 'asciidoctor/asciidoctor-leanpub-converter' &&
            System.getenv('TRAVIS_JDK_VERSION') == 'oraclejdk8' &&
            System.getenv('TRAVIS_PULL_REQUEST') == 'false'

        travisAllowPublish = travisPublishableRepo && System.getenv('TRAVIS_BRANCH') == 'master'
        travisAllowDryRun = travisPublishableRepo && System.getenv('TRAVIS_BRANCH') != 'master' 
    }

    task travisParams {
        doLast {
            ['TRAVIS_BRANCH','TRAVIS_REPO_SLUG','TRAVIS_PULL_REQUEST','TRAVIS_JDK_VERSION'].each {
                println "${it}: ${System.getenv(it)}"
            }
            println "Allow publish: ${travisAllowPublish}"
            println "Allow dry run: ${travisAllowDryRun}"
        }
    }

    [ 'artifactoryPublish', 'bintrayUpload'].each {
        Task t = tasks.getByName(it)
        t.dependsOn travisParams
        t.enabled = travisAllowPublish || travisAllowDryRun
    }

    bintray {
        dryRun = travisAllowDryRun
    }

    artifactory {
        publish {
            defaults {
                publishBuildInfo = travisAllowDryRun
                publishArtifacts = travisAllowDryRun
                publishPom       = travisAllowDryRun
            }
        }
    }
}

